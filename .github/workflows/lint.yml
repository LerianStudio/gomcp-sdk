name: Lint

on:
  workflow_dispatch: # Allow manual triggering
  workflow_call: # Allow calling from other workflows

permissions:
  contents: read

jobs:
  golangci-lint:
    name: golangci-lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: true

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v8
      with:
        version: latest
        args: --timeout=10m

  go-fmt:
    name: Go Format Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'

    - name: Check formatting
      run: |
        if [ -n "$(gofmt -l .)" ]; then
          echo "The following files are not formatted:"
          gofmt -l .
          echo ""
          echo "Please run 'gofmt -w .' to fix formatting"
          exit 1
        fi

  go-vet:
    name: Go Vet
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Run go vet
      run: go vet ./...

  gosec:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: true

    - name: Run gosec
      uses: securego/gosec@master
      with:
        args: '-fmt sarif -out gosec.sarif -stdout -verbose=text ./...'

    - name: Upload SARIF file
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: gosec.sarif

  lint-summary:
    name: Lint Summary
    runs-on: ubuntu-latest
    needs: [golangci-lint, go-fmt, go-vet, gosec]
    if: always()
    steps:
    - name: Create summary
      run: |
        echo "## Lint Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| golangci-lint | ${{ needs.golangci-lint.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| go fmt | ${{ needs.go-fmt.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| go vet | ${{ needs.go-vet.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| gosec | ${{ needs.gosec.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check if any critical linting failed
        FAILED=false
        if [ "${{ needs.go-fmt.result }}" != "success" ]; then
          echo "❌ **Format check failed** - Please run \`gofmt -w .\`" >> $GITHUB_STEP_SUMMARY
          FAILED=true
        fi
        if [ "${{ needs.go-vet.result }}" != "success" ]; then
          echo "❌ **Go vet failed** - Please fix vet issues" >> $GITHUB_STEP_SUMMARY
          FAILED=true
        fi
        if [ "${{ needs.golangci-lint.result }}" != "success" ]; then
          echo "⚠️ **golangci-lint issues found** - Please review linting warnings" >> $GITHUB_STEP_SUMMARY
        fi
        if [ "${{ needs.gosec.result }}" != "success" ]; then
          echo "⚠️ **Security scan issues found** - Please review security warnings" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "$FAILED" = "false" ]; then
          echo "✅ **All critical checks passed!**" >> $GITHUB_STEP_SUMMARY
        fi