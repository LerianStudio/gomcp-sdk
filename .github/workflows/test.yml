name: Test

on:
  workflow_dispatch: # Allow manual triggering
    inputs:
      go_version:
        description: 'Go version to test (e.g., 1.24)'
        required: false
        type: string
        default: '1.24'
      os:
        description: 'OS to test on'
        required: false
        type: choice
        options:
          - 'all'
          - 'ubuntu-latest'
          - 'macos-latest'
          - 'windows-latest'
        default: 'all'
      coverage:
        description: 'Generate coverage report'
        required: false
        type: boolean
        default: true
  workflow_call: # Allow calling from other workflows
    inputs:
      go_version:
        required: false
        type: string
        default: '1.24'
      os:
        required: false
        type: string
        default: 'all'
      coverage:
        required: false
        type: boolean
        default: true

permissions:
  contents: read

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJSON(
          inputs.os == 'all' && '["ubuntu-latest", "macos-latest", "windows-latest"]' ||
          format('["{0}"]', inputs.os)
        ) }}
        go-version: ${{ fromJSON(
          inputs.go_version == '1.24' && '["1.23", "1.24"]' ||
          format('["{0}"]', inputs.go_version)
        ) }}
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      shell: bash
      run: |
        if [ "${{ inputs.coverage }}" = "true" ]; then
          go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...
        else
          go test -v -race ./...
        fi

    - name: Upload coverage to Codecov
      if: inputs.coverage && matrix.os == 'ubuntu-latest' && matrix.go-version == '1.24'
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.txt
        flags: unittests
        fail_ci_if_error: false

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ inputs.go_version || '1.24' }}
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Run integration tests
      run: go test -v -tags=integration -timeout=10m ./...

  benchmark-tests:
    name: Benchmark Tests
    runs-on: ubuntu-latest
    if: inputs.os == 'all' || inputs.os == 'ubuntu-latest'
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ inputs.go_version || '1.24' }}
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Run benchmarks
      run: go test -bench=. -benchmem -timeout=20m ./...

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, benchmark-tests]
    if: always()
    steps:
    - name: Create summary
      run: |
        echo "## Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Test Type | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Unit Tests | ${{ needs.unit-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration Tests | ${{ needs.integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Benchmark Tests | ${{ needs.benchmark-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.unit-tests.result }}" = "success" ] && [ "${{ needs.integration-tests.result }}" = "success" ]; then
          echo "✅ **All tests passed!**" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Some tests failed** - Please check the test results" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Configuration" >> $GITHUB_STEP_SUMMARY
        echo "- Go Version: ${{ inputs.go_version || '1.24' }}" >> $GITHUB_STEP_SUMMARY
        echo "- OS: ${{ inputs.os || 'all' }}" >> $GITHUB_STEP_SUMMARY
        echo "- Coverage: ${{ inputs.coverage || 'true' }}" >> $GITHUB_STEP_SUMMARY