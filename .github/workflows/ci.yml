name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allow manual triggering

permissions:
  contents: read

jobs:
  # Basic validation jobs that can run independently
  vet:
    name: Go Vet
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: true
    
    - name: Install dependencies
      run: go mod download
    
    - name: Run go vet
      run: go vet ./...

  fmt:
    name: Go Format
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
    
    - name: Check formatting
      run: |
        if [ -n "$(gofmt -l .)" ]; then
          echo "The following files are not formatted:"
          gofmt -l .
          echo "Run 'gofmt -w .' to fix formatting"
          exit 1
        fi

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: true

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v8
      with:
        version: latest
        args: --timeout=10m
      continue-on-error: true  # Non-blocking for now

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: true

    - name: Run gosec
      uses: securego/gosec@master
      with:
        args: '-fmt sarif -out gosec.sarif -stdout -verbose=text ./...'
      continue-on-error: true

    - name: Upload SARIF file
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: gosec.sarif

  # Test jobs
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.23', '1.24']
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        cache: true

    - name: Install dependencies
      run: go mod download

    - name: Run tests
      shell: bash
      run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.24'
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.txt
        flags: unittests
        fail_ci_if_error: false

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'integration')
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: true

    - name: Run integration tests
      run: go test -v -tags=integration -timeout=10m ./...

  # Build jobs
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: true

    - name: Build SDK
      run: go build -v ./...

    - name: Build examples
      shell: bash
      run: |
        cd examples
        for dir in */; do
          if [ -f "$dir/go.mod" ]; then
            echo "Building example: $dir"
            cd "$dir"
            go build -v ./...
            cd ..
          fi
        done

    - name: Build tools
      shell: bash
      run: |
        cd tools
        for dir in */; do
          if [ -f "$dir/main.go" ]; then
            echo "Building tool: $dir"
            cd "$dir"
            go build -v .
            cd ..
          fi
        done

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: gomcp-sdk:ci-test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Optional benchmark job
  benchmark:
    name: Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'benchmark')
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: true

    - name: Run benchmarks
      run: go test -bench=. -benchmem -timeout=20m ./...

  # Status check job that waits for core jobs
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [vet, fmt, test, build]
    if: always()
    steps:
    - name: Check job results
      run: |
        if [ "${{ needs.vet.result }}" != "success" ]; then
          echo "Go vet failed"
          exit 1
        fi
        if [ "${{ needs.fmt.result }}" != "success" ]; then
          echo "Go format check failed"
          exit 1
        fi
        if [ "${{ needs.test.result }}" != "success" ]; then
          echo "Tests failed"
          exit 1
        fi
        if [ "${{ needs.build.result }}" != "success" ]; then
          echo "Build failed"
          exit 1
        fi
        echo "All core CI jobs passed!"