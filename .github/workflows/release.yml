name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch: # Allow manual triggering
    inputs:
      tag:
        description: 'Tag to release (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as prerelease'
        required: false
        type: boolean
        default: false
      skip_tests:
        description: 'Skip tests during release'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  packages: write

jobs:
  # Pre-release validation
  validate:
    name: Pre-release Validation
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Run full test suite
      run: go test -v -race -timeout=10m ./...

    - name: Run go vet
      run: go vet ./...

    - name: Security scan
      uses: securego/gosec@master
      with:
        args: './...'
      continue-on-error: true

  # Build release artifacts
  build-release:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: [validate]
    if: always() && (needs.validate.result == 'success' || needs.validate.result == 'skipped')
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: amd64
          - goos: windows
            goarch: arm64
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: true

    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ inputs.tag }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Download dependencies
      run: go mod download

    - name: Build release binaries
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        mkdir -p release
        
        # Build tools with version info
        VERSION="${{ steps.version.outputs.version }}"
        LDFLAGS="-s -w -X main.version=${VERSION}"
        
        # Build mcp-validator
        if [ -f "tools/mcp-validator/main.go" ]; then
          go build -ldflags="${LDFLAGS}" -o release/mcp-validator${{ matrix.goos == 'windows' && '.exe' || '' }} ./tools/mcp-validator
        fi
        
        # Build mcp-benchmark  
        if [ -f "tools/mcp-benchmark/main.go" ]; then
          go build -ldflags="${LDFLAGS}" -o release/mcp-benchmark${{ matrix.goos == 'windows' && '.exe' || '' }} ./tools/mcp-benchmark
        fi
        
        # Create archive
        if [ "${{ matrix.goos }}" = "windows" ]; then
          zip -r gomcp-sdk-${{ steps.version.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}.zip release/
        else
          tar -czf gomcp-sdk-${{ steps.version.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz -C release .
        fi

    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-${{ matrix.goos }}-${{ matrix.goarch }}
        path: |
          *.tar.gz
          *.zip
        retention-days: 7

  # Create GitHub release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-release]
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version and release info
      id: release_info
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ inputs.tag }}"
          PRERELEASE="${{ inputs.prerelease }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
          PRERELEASE="false"
          if [[ $VERSION == *"alpha"* ]] || [[ $VERSION == *"beta"* ]] || [[ $VERSION == *"rc"* ]]; then
            PRERELEASE="true"
          fi
        fi
        
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "prerelease=${PRERELEASE}" >> $GITHUB_OUTPUT

    - name: Generate changelog
      id: changelog
      run: |
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -z "$PREVIOUS_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges | head -20)
        else
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges $PREVIOUS_TAG..HEAD)
        fi
        
        # Write changelog to file for multiline handling
        echo "## Changes" > changelog.md
        echo "" >> changelog.md
        echo "$CHANGELOG" >> changelog.md
        echo "" >> changelog.md
        echo "## Installation" >> changelog.md
        echo "" >> changelog.md
        echo '```bash' >> changelog.md
        echo "go get github.com/fredcamaral/gomcp-sdk@${{ steps.release_info.outputs.version }}" >> changelog.md
        echo '```' >> changelog.md
        echo "" >> changelog.md
        echo "## Docker" >> changelog.md
        echo "" >> changelog.md
        echo '```bash' >> changelog.md
        echo "docker pull ghcr.io/${{ github.repository }}:${{ steps.release_info.outputs.version }}" >> changelog.md
        echo '```' >> changelog.md

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.release_info.outputs.version }}
        release_name: Release ${{ steps.release_info.outputs.version }}
        body_path: changelog.md
        draft: false
        prerelease: ${{ steps.release_info.outputs.prerelease == 'true' }}

  # Upload release assets
  upload-assets:
    name: Upload Release Assets
    runs-on: ubuntu-latest
    needs: [create-release]
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: amd64
          - goos: windows
            goarch: arm64
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-${{ matrix.goos }}-${{ matrix.goarch }}

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./*${{ matrix.goos }}-${{ matrix.goarch }}.*
        asset_name: gomcp-sdk-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.zip' || '.tar.gz' }}
        asset_content_type: ${{ matrix.goos == 'windows' && 'application/zip' || 'application/gzip' }}

  # Build and push Docker images
  docker-release:
    name: Docker Release
    runs-on: ubuntu-latest
    needs: [create-release]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ inputs.tag }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=raw,value=${{ steps.version.outputs.version }}
          type=semver,pattern={{version}},value=${{ steps.version.outputs.version }}
          type=semver,pattern={{major}}.{{minor}},value=${{ steps.version.outputs.version }}
          type=semver,pattern={{major}},value=${{ steps.version.outputs.version }}
          type=raw,value=latest,enable=${{ !contains(steps.version.outputs.version, 'alpha') && !contains(steps.version.outputs.version, 'beta') && !contains(steps.version.outputs.version, 'rc') }}

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ steps.version.outputs.version }}

  # Release success summary
  release-summary:
    name: Release Summary
    runs-on: ubuntu-latest
    needs: [create-release, upload-assets, docker-release]
    if: always()
    steps:
    - name: Create summary
      run: |
        echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ inputs.tag }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        
        echo "### Version: ${VERSION}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### Status" >> $GITHUB_STEP_SUMMARY
        echo "- GitHub Release: ${{ needs.create-release.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Release Assets: ${{ needs.upload-assets.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Docker Images: ${{ needs.docker-release.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- Binaries for Linux, macOS, Windows (amd64, arm64)" >> $GITHUB_STEP_SUMMARY
        echo "- Docker images: \`ghcr.io/${{ github.repository }}:${VERSION}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### Installation" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "go get github.com/fredcamaral/gomcp-sdk@${VERSION}" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY