name: Package

on:
  push:
    branches: [ main ]
    paths:
      - 'go.mod'
      - 'go.sum'
      - '**/*.go'
  pull_request:
    branches: [ main ]
    paths:
      - 'go.mod'
      - 'go.sum'
      - '**/*.go'
  workflow_dispatch: # Allow manual triggering
    inputs:
      version:
        description: 'Version to package (e.g., v1.0.0)'
        required: false
        type: string
      skip_tests:
        description: 'Skip tests during packaging'
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  packages: write

jobs:
  # Pre-package validation (can be skipped if needed)
  validate:
    name: Pre-package Validation
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: go test -v -race ./...

    - name: Run go vet
      run: go vet ./...

    - name: Check formatting
      run: |
        if [ -n "$(gofmt -l .)" ]; then
          echo "Code is not formatted. Run 'gofmt -w .'"
          exit 1
        fi

  # Build multi-platform binaries
  build-binaries:
    name: Build Binaries
    runs-on: ubuntu-latest
    needs: [validate]
    if: always() && (needs.validate.result == 'success' || needs.validate.result == 'skipped')
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: amd64
          - goos: windows
            goarch: arm64
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Build tools
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        mkdir -p dist/${{ matrix.goos }}-${{ matrix.goarch }}
        
        # Build mcp-validator
        if [ -f "tools/mcp-validator/main.go" ]; then
          go build -ldflags="-s -w" -o dist/${{ matrix.goos }}-${{ matrix.goarch }}/mcp-validator${{ matrix.goos == 'windows' && '.exe' || '' }} ./tools/mcp-validator
        fi
        
        # Build mcp-benchmark
        if [ -f "tools/mcp-benchmark/main.go" ]; then
          go build -ldflags="-s -w" -o dist/${{ matrix.goos }}-${{ matrix.goarch }}/mcp-benchmark${{ matrix.goos == 'windows' && '.exe' || '' }} ./tools/mcp-benchmark
        fi

    - name: Upload binaries
      uses: actions/upload-artifact@v4
      with:
        name: binaries-${{ matrix.goos }}-${{ matrix.goarch }}
        path: dist/${{ matrix.goos }}-${{ matrix.goarch }}/
        retention-days: 7

  # Build Docker images for multiple platforms
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [validate]
    if: always() && (needs.validate.result == 'success' || needs.validate.result == 'skipped')
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ inputs.version }},enable=${{ inputs.version != '' }}
          type=sha

    - name: Log in to GitHub Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Create package summary
  package-summary:
    name: Package Summary
    runs-on: ubuntu-latest
    needs: [build-binaries, build-docker]
    if: always()
    steps:
    - name: Create summary
      run: |
        echo "## Package Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### Build Status" >> $GITHUB_STEP_SUMMARY
        echo "- Binaries: ${{ needs.build-binaries.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Docker: ${{ needs.build-docker.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ inputs.version }}" != "" ]; then
          echo "### Version: ${{ inputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "### Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- Multi-platform binaries (linux, darwin, windows)" >> $GITHUB_STEP_SUMMARY
        echo "- Docker images (linux/amd64, linux/arm64)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ github.event_name }}" != "pull_request" ]; then
          echo "### Registry" >> $GITHUB_STEP_SUMMARY
          echo "- Docker: \`ghcr.io/${{ github.repository }}\`" >> $GITHUB_STEP_SUMMARY
        fi